security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto
            cost: 12
            migrate_from: [rl_v1]
        rl_v1:
            id: App\Security\Hasher\RLv1PasswordHasher

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        database:
            entity:
                class: App\Entity\User
                property: name

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            form_login:
                login_path: security.login
                check_path: security.login
                default_target_path: user.my_radio_tables
                username_parameter: security_login[username]
                password_parameter: security_login[password]
                enable_csrf: true
                csrf_parameter: security_login[_token]
                csrf_token_id: security_login
            logout:
                path: security.logout
                target: homepage
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800   # 1 week.
                remember_me_parameter: security_login[rememberMe]

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
